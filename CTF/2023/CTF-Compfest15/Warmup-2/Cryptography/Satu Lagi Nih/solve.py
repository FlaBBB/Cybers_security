from Crypto.Util.number import inverse, long_to_bytes
from sympy.ntheory.modular import crt
import gmpy2
from math import gcd
import primefac

c1 = 13176066006409175076946800093567934228770756579485184178011623889349714201561393526547929871096598234386485686487764854016607372001213322983027245043207518465891259750728312803972275528643663985907061890582956997119377979584531790254383674041978184219653147768119754722138225744039542468961144867160090425847198307498489014417497705327725491455782445420391487053470774765140728948612026903649205792590175351038554013486992947980950882610715496172123860835949848027408540424612471528135478950625376005930089407021121827799720382423643902049752441843754811104990024560083662816792303533060005680057385843719147871477238
c3 = 1887568031549410107367816546852962382539842015124066251594741736231769954084254300280973000823699990603738426077234303959170583907817240334929387640202324102782323322040483067173956762415328587409330989532236628961410043655664115397835609433368961226825050720059589961739995712313805060203264392750155897798760661977579709491972996107418139074668866773088073379467560626792007770887201881100210519530200910411198650120193021988851916527939261492094074750332157460353166616629479123630486219999498662865546414114996012978347060747690782683650082103974437123846274642072604936886275056897450209856187442135612606765359
c4 = 3834123863390796509609238639170904738303756161222643061302484585212234272389277258717558887679608445061871985086481462970892346503203001452266986625288093659349538060671100838011536934622020624131578867546855476327554613344203757064551805599860920802844562778434425631324573060478800121753510963644784525092070454793577226320142318385438099427720941206439698997215532969613523425364632178817203271646171538907273839823010746889710556194586406631997556598233931534849269481565001787196941884724915852834595324066279030774946917494829008529554555173169727881510493658105613668291310139975035066741405685543336057381538
c5 = 11507911872697612061597565887519461001266977892974109662801573354182131992512462392564260067448260613212895589756723883099104167102007496705600808266718451232280103962666935191165705293847927963662554008826451756716191638548766691431829430119827944513655837691882164870025689614473754233137091599173571111565044992118491943801698830296896739154923243456885423462832732105867156537119945027488247517931661774415569805011362995105871942131543240754402959089007129263587077282425534790570475954478512426139114476718356457017164121610148757206733219235322785396563651715085903823455498344818015573834912449090796923141781
n1 = 14946682423812503618377977395537496044314832394454823798192216383890991185920681813880246381077389645642425804822787162475627030037340278741135009376822575603555939950553911312112660894137044917722827816512535147271446142134354038158189441589127320072676112995528769437411106511964498316687412314986199319243868146350116079480124358829412340905726657915517112230303483678135560485895398913554146897955071164991394022547112664098939867171089768591223410284368117536039223177629130277503326502208408995134980701794947018770178441280174182437596080512515765554729565129602923337956004901793120664103103216846285820974519
n2 = 551788394397417041526616749656460981636719287629832255263493
n3 = 18817148184907457457408673037411857285388854376530737292490561993435064205835087643477092387463149527972655498144407072396872840119277291694794706875534262860881209570224019377957024490677739402109047502324900740969603835918347720431407852770447614677802279594315542291744102572558925006586008103337861012995597426111969258107731289241763828945542579149185120965162735487846716910682769060602253700094492922693373203565618565781195129841442555971813174340851450335633198534590129861750960860720421567108621106145464002696840429547384065733386660810092585104469601247164717183327886865207576843764232014701477574868687
n4 = 16830456420766374764633649848434591053871887328135514213428231353689161051692870655016059167143902663081080146909102319421720165713420665043073578875447756698070633707380976076394588065737881941156051853560933577591574184853417444538412124181061296075149518200761906112889157698855738742174437691407329981757420710565016113202258746602329594246616305257459580252392985174300095019658287779105594976136052845309571139318138994400526674148655784998047915476572203923440958275026633628782360212112383919983223243005881994963605392152926539022807651805154298625544120264263039595759075112702225170322261814884998904371073
n5 = 15639587302425334494456737585636364392599219512802844399408866331843557912668986575521900075104165081243814373756820501393913572347810330046941877776292490200427823599128012880006250849900909841504572230934253440662489558329837661459975294551413209214440064042973240041604021338403061965805645134602035159940307757234476720522022278069488234831782059745082491536667595116485412144747973396400851869183696431466941703712786486751216772552416503360780057456682486278117429315099014816270391818001272677010970577326100260143050010961828504474144740866963206369986070292347434055240099791543354364201937145224504068055741
e = 65537
    
def fermat(n, factors_count=2 ):
    assert(factors_count % 2  == 0 )
    factor_list = []
    gmpy2.get_context().precision = int(2048)
    a = int(gmpy2.sqrt(n))

    a2 = a * a
    b2 = gmpy2.sub(a2, n)

    while True:
        a += 1 
        b2 = a * a - n

        if gmpy2.is_square(b2):
            b2 = gmpy2.mpz(b2)
            gmpy2.get_context().precision = int(2048)
            b = int(gmpy2.sqrt(b2))
            factor_list.append([a + b, a - b])

        if len(factor_list) * 2  == factors_count:
            break

    return factor_list

# factor n2
# wtih yafu
p0 = 692073724328231098644579915163
q0 = 797297130349828638322528850911
phi_n2 = (p0 - 1) * (q0 - 1)
d2 = inverse(e, phi_n2)

fermat_res = fermat(n1, 4)

p1 = gcd(fermat_res[0][0], fermat_res[1][0])
p2 = fermat_res[0][0] // p1
q1 = gcd(fermat_res[0][1], fermat_res[1][1])
q2 = fermat_res[0][1] // q1

phi_n1 = (p1 - 1) * (p2 - 1) * (q1 - 1) * (q2 - 1)
d1 = inverse(e, phi_n1)
c1 = pow(c1, d1, n1)
c1 = pow(c1, d1, n1)
flag = long_to_bytes(pow(c1, d1, n1))

c2 = crt([n3, n4, n5], [c3, c4, c5])[0]
c2 = gmpy2.iroot(c2, 3)[0]
c2 = pow(c2, d1, n1)
flag += long_to_bytes(pow(c2, d2, n2))

print(flag)