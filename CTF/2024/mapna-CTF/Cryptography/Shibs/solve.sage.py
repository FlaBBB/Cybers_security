

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_1024 = Integer(1024); _sage_const_20316898932195904153277570911129808751568815578115203862825426326247688399447840960418077345063791379522152467572219078649052797300815169624324245983590614914067269781160218800744443132820786495383622657350005442865119235171347222481549171383138463856866590153226706585323109487068718209302113471433380661465050751463957327192775767168671487596946840993911799696944069759277414133632444513772210700794949276020219498655982617016744321984479076362225276288530893635176013522707993482886351558163399233902562390621254309853983712254751850630385079750216639722676398376824903099579116864460998259826947136455660974737633 = Integer(20316898932195904153277570911129808751568815578115203862825426326247688399447840960418077345063791379522152467572219078649052797300815169624324245983590614914067269781160218800744443132820786495383622657350005442865119235171347222481549171383138463856866590153226706585323109487068718209302113471433380661465050751463957327192775767168671487596946840993911799696944069759277414133632444513772210700794949276020219498655982617016744321984479076362225276288530893635176013522707993482886351558163399233902562390621254309853983712254751850630385079750216639722676398376824903099579116864460998259826947136455660974737633); _sage_const_112981924875557500958025001180130494828271302148393893025039250618449754880107262891213034570290994460680732065864408219699255537220809236513831561599199136870056419874815435027857448315805793914961273026882116413167515833581245087132919209478091324962372324771986076010340277554904109601589334046901209670673 = Integer(112981924875557500958025001180130494828271302148393893025039250618449754880107262891213034570290994460680732065864408219699255537220809236513831561599199136870056419874815435027857448315805793914961273026882116413167515833581245087132919209478091324962372324771986076010340277554904109601589334046901209670673); _sage_const_3045339581292945711130813005351003100918522557110757541588006962379795819964889960982006172396478992403763951169397699477604011489683403206194674478676115307579754281253958928474112104087602753563505848223560038859380782692201785087834133116953880301903767021262497807797262966215767967235011554145888668721199447563741572273525508047234141844260401652933196055533764562153454963082569500478073362290691632890264262315099050876574517869170470080069161301450816555901477760392115210762498464643598219802952797283932722013302922244300834587051779128033516492433437534261890143822056118794447406885925957834712258842422 = Integer(3045339581292945711130813005351003100918522557110757541588006962379795819964889960982006172396478992403763951169397699477604011489683403206194674478676115307579754281253958928474112104087602753563505848223560038859380782692201785087834133116953880301903767021262497807797262966215767967235011554145888668721199447563741572273525508047234141844260401652933196055533764562153454963082569500478073362290691632890264262315099050876574517869170470080069161301450816555901477760392115210762498464643598219802952797283932722013302922244300834587051779128033516492433437534261890143822056118794447406885925957834712258842422); _sage_const_1022 = Integer(1022); _sage_const_511 = Integer(511); _sage_const_0x10001 = Integer(0x10001)
from Crypto.Util.number import long_to_bytes


def find_allowed(p_bit, q_bit):
    if p_bit == -_sage_const_1  and q_bit == -_sage_const_1 :
        return [_sage_const_0 , _sage_const_1 , _sage_const_2 , _sage_const_3 ]
    elif p_bit == -_sage_const_1  and q_bit == _sage_const_0 :
        return [_sage_const_0 , _sage_const_2 ]
    elif q_bit == -_sage_const_1  and p_bit == _sage_const_0 :
        return [_sage_const_0 , _sage_const_1 ]
    elif p_bit == -_sage_const_1  and q_bit == _sage_const_1 :
        return [_sage_const_1 , _sage_const_3 ]
    elif q_bit == -_sage_const_1  and p_bit == _sage_const_1 :
        return [_sage_const_2 , _sage_const_3 ]
    elif p_bit == _sage_const_0  and q_bit == _sage_const_0 :
        return [_sage_const_0 ]
    elif p_bit == _sage_const_1  and q_bit == _sage_const_0 :
        return [_sage_const_2 ]
    elif p_bit == _sage_const_0  and q_bit == _sage_const_1 :
        return [_sage_const_1 ]
    else:
        return [_sage_const_3 ]


def branch_and_prune(n, dna, p_bits, q_bits, s):
    solutions = [(_sage_const_1 , _sage_const_1 )]
    loop_round = _sage_const_1  + min(s, _sage_const_1024  - s)
    for bit_pos in range(_sage_const_2 , loop_round):
        next_solutions = []
        modulus = _sage_const_2 **bit_pos
        added = _sage_const_2  ** (bit_pos - _sage_const_1 )
        target_n = n % modulus
        target_dna = dna % modulus
        accepted = find_allowed(p_bits[-bit_pos], q_bits[-bit_pos])
        for solution in solutions:
            pqs = [
                (solution[_sage_const_0 ], solution[_sage_const_1 ]),
                (solution[_sage_const_0 ], solution[_sage_const_1 ] + added),
                (solution[_sage_const_0 ] + added, solution[_sage_const_1 ]),
                (solution[_sage_const_0 ] + added, solution[_sage_const_1 ] + added),
            ]

            for i in accepted:
                p, q = pqs[i]
                if (p * q) % modulus == target_n and ((p & q) == target_dna):
                    next_solutions.append(pqs[i])

        solutions = next_solutions.copy()
        if solutions == []:
            break

    return solutions


n = _sage_const
dna = _sage_const_112981924875557500958025001180130494828271302148393893025039250618449754880107262891213034570290994460680732065864408219699255537220809236513831561599199136870056419874815435027857448315805793914961273026882116413167515833581245087132919209478091324962372324771986076010340277554904109601589334046901209670673 
enc = _sage_const_3045339581292945711130813005351003100918522557110757541588006962379795819964889960982006172396478992403763951169397699477604011489683403206194674478676115307579754281253958928474112104087602753563505848223560038859380782692201785087834133116953880301903767021262497807797262966215767967235011554145888668721199447563741572273525508047234141844260401652933196055533764562153454963082569500478073362290691632890264262315099050876574517869170470080069161301450816555901477760392115210762498464643598219802952797283932722013302922244300834587051779128033516492433437534261890143822056118794447406885925957834712258842422 

dna_bits = list(map(int, bin(dna)[_sage_const_2 :].zfill(_sage_const_1024 )))
is_found = False
p_bits = [_sage_const_1 ] + [-_sage_const_1  for _ in range(_sage_const_1022 )] + [_sage_const_1 ]
q_bits = [_sage_const_1 ] + [-_sage_const_1  for _ in range(_sage_const_1022 )] + [_sage_const_1 ]
for i in range(_sage_const_1 , _sage_const_1024 ):
    if dna_bits[i]:
        p_bits[i] = _sage_const_1 
        q_bits[i] = _sage_const_1 
for s in range(_sage_const_1024 , _sage_const_0 , -_sage_const_1 ):
    shift = _sage_const_1024  - s
    print(f"{shift = }")
    p_bits_, q_bits_ = p_bits.copy(), q_bits.copy()
    q_bits__ = p_bits_[s:] + p_bits_[:s]
    q_bits_ = [_sage_const_1  if (q_bits_[i] == _sage_const_1  or q_bits__[i] == _sage_const_1 ) else -_sage_const_1  for i in range(_sage_const_1024 )]

    for i in range(_sage_const_1 , _sage_const_1024 ):
        if dna_bits[i] == _sage_const_1 :
            continue

        if p_bits_[i] == _sage_const_1  and q_bits_[i] == -_sage_const_1 :
            q_bits_[i] = _sage_const_0 
        elif q_bits_[i] == _sage_const_1  and p_bits_[i] == -_sage_const_1 :
            p_bits_[i] = _sage_const_0 
    res = branch_and_prune(n, dna, p_bits_, q_bits_, shift)
    if res == []:
        continue

    P = PolynomialRing(ZZ, names=('x',)); (x,) = P._first_ngens(1)
    for pair in res:
        if s <= _sage_const_511 : # q lsb
            f = (_sage_const_2  ** (_sage_const_1024  - s) * pair[_sage_const_1 ] + x) * (_sage_const_2  ** s * x + pair[_sage_const_1 ])
            d = f.roots()
            d = [k[_sage_const_0 ] for k in d if k[_sage_const_0 ] > _sage_const_0 ]
            if d == []:
                continue
            p = _sage_const_2  ** (_sage_const_1024  - s) * pair[_sage_const_1 ] + d[_sage_const_0 ]
        else:
            f = (_sage_const_2  ** (_sage_const_1024  - s) * x + pair[_sage_const_0 ]) * (_sage_const_2  ** s * pair[_sage_const_0 ] + x) - n
            d = f.roots()
            d = [k[_sage_const_0 ] for k in d if k[_sage_const_0 ] > _sage_const_0 ]
            if d == []:
                continue
            p = _sage_const_2  ** (_sage_const_1024  - s) * d[_sage_const_0 ] + pair[_sage_const_0 ]

        if n % p == _sage_const_0 :
            print(f'Found')
            q = n // p
            print(f'{p = }')
            print(f'{q = }')
            is_found = True
            break

    if is_found:
        break

d = pow(_sage_const_0x10001 , -_sage_const_1 , (p - _sage_const_1 ) * (q - _sage_const_1 ))
m = pow(enc, d, n)
print(long_to_bytes(int(m)))

