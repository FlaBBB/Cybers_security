# src: https://cryptohack.org/challenges/null_padding/solutions/
import gmpy2
from math import gcd
from Crypto.Util.number import bytes_to_long, inverse


def pad100(msg):
    return msg + b'\x00' * (100 - len(msg))

n = 95341235345618011251857577682324351171197688101180707030749869409235726634345899397258784261937590128088284421816891826202978052640992678267974129629670862991769812330793126662251062120518795878693122854189330426777286315442926939843468730196970939951374889986320771714519309125434348512571864406646232154103
e = 3
c = 63476139027102349822147098087901756023488558030079225358836870725611623045683759473454129221778690683914555720975250395929721681009556415292257804239149809875424000027362678341633901036035522299395660255954384685936351041718040558055860508481512479599089561391846007771856837130233678763953257086620228436828

FLAG = b"crypto{???????????????????????????????????}"

assert gcd(2, n) == 1
p = 8*(100 - len(FLAG))

print("[-] p:", p)

# ct = pow(flag*p, e, n)
# ct = (pow(flag, e, n) * pow(p, e, n)) % n
# pow(flag, 3, n) = (pow(flag, e, n) * pow(p, e, n) * pow(p, -e, n)) % n
#                 = (ct * pow(p, -e, n)) % n

inv = pow(inverse(2, n), p * e, n)
print("[-] inv:", inv)

rsa_enc = c * inv % n
for i in range(1000):
    ans = gmpy2.iroot(rsa_enc + i * n, 3)
    if ans[1]:
        pt = int(ans[0])
        print("[+] flag:", pt.to_bytes(len(FLAG), 'big'))
        break